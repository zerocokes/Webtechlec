CSS (Cascading Style Sheet)
-language used to specify the presentation (e.g. Layout, formatting, fonts, colors, etc.) of structurally marked up documents (e.g. HTML, XM, SVG, MathML etc.)
-develop by Hakon Wium Lie (CHSS) and Bert Bos (SSP)
*version history:
•	CSS Level 1 (CSS1, W3C Recommendation, Dec 1996)
•	CSS Level 2 (CSS2, W3C Recommendation, May 1998)
•	CSS Level 2 Revision (CSS2.1, W3C Recommendation, Jun 2011)
•	CSS Level 3
-modular approach to CSS development (as opposed to the monolithic specification of CSS 2.1)
HTML Stylesheets
•	Sources of style for HTML document
Author styles
	External (a.k.a linked) stylesheets (recommended)
	Embedded (a.k.a internal) stylesheets
	Inline styles
•	User styles
	Some browsers (non-standard) alternatives through plugins/ extensions (e.g. stylish)
•	User Agent styles
	Sample default user agent stylesheet from CSS 2.1
	The source of a style denotes its origin, which is used in determining its procedural in the cascade.
CSS Selector
•	Structure used as a condition in a css rule to determine which elements in the document tree
Ex. Of select h1 + ul > a[target] {
•	Chain of one or more sequence of simple selectors separated by combinators with one pseudo
•	Selector group
	Comma-separated list of selectors representing the union of all elements selected by each of the selectors in the list
Ex. Of universal selector h1, h2, h3 ;link, : visited ul, h1, p
•	Simple selectors
	Universal selector
{color: gray;}
div > * {margin: 0; padding: 0;}
	Type selectors
  p{background-color : #fff;}
  h1{color: rgba(255,0,0,0.5:)}
•	ID selector
   nav# main {padding-let: 5x;}
   #info {padding:3px 2px 10px;}
•	Class selectors
Ul.top-ten {list-style: disc inside;} 
Normal {border – style : solid 
p.lead.quote{text-align
	Attribute selectors
Img [alt] {border : 1px solid green;}
Nav [id = main] {float : left;}
•	Combinators
Descendant combinator (whitespace, i.e. space, tab, line feed)
Child combinator (>)
General sibling combinator
•	Pseudo elements
: first – letter, :: first – letter
: first – line , :: first – line
: before , :: before
:after : after
	div{
		counter -reset : chapter 0:
	}
p[title = HTML] {text – indent : 2em;}
p[class ~= warn ] {color #naa0000;}
p[ lang 1 = en] {font – style : italic;}
•	Pseudo-classes
	Dynamic pseudo-classes
o	Link pseudo-classes
:link, : visited
User action pseudo-classes
	User action pseudo-classes
:hover, : active, :focus
	Target pseudo- class
:target
	Language pseudo- class
o	:lang ()
	UI element states pseudo-  classes
:enabled, :disabled, :checked, :indeterminate
	Structural pseudo – classes
o	:root
o	:first-child, :last-child, : only-child
o	nth – child (), : nth – last – child()
o	:first – of – type, : last- of-type, only-of-type
o	:nth-of-type, : nth-last-child
o	:empty
	Negation pseudo-class
o	:not()
•	Properties
o	Shorthand properties
-allows to specify the values of several properties with a single property
o	e.g. background font, margin, padding, border, border-left, border-width, etc.
Vendor specific extensions (a.k.a. vendor prefix)
Used by the browser vendors as a prefix for the names of experimental or non-standard CSS properties; lately vendors are moving from vendor prefixes in favor of user controlled flags or preferences
o	e.g , -webkit- , -moz ,-o-, -ms-, etc.
o	custom properties a.k.a css variables(expirement)
-property names prefixed with --representing a value that can be used throughout the document using the var() function
•	Values
o	Value processing
Declared, cascaded, specified, computed, used, actual values
•	Value Types
	Keywords
o	CSS wide keywords
o	Initial, inherit, unset
o	Property-specific keywords
	Numbers
o	Integers or reals in (scientific) decimal notation
	Dimensions
o	Length, angle, duration (or time), grequency, resoulution
o	Length units:
o	Font-relative: em, ex,ch,rem
o	Viewport-percentage:vw,vh,vmin,vmax
o	Absoulute:cm,mm,in,pt,pc,px
•	Angle units:
o	Deg,grad,vad,turn
o	Use in some gradient and transform functions
•	Duration (or time)units
S,ms
Use in animation, transition, and related properties
•	Frequency units:
Hz,khz
Initially introduced in CSS2 for the aural media type; reintroduced in CSS 3, but is currently unused
Resolution units
Dpi,dpcm,dppx
o	Percentage
o	Number with a % suffix
o	Calculated as a percentage of sonme value(usually taken from the parent element)
	URL’s and URI’s
o	url ().function with a absolute or relative 
	Colors
o	Color keywords : red
o	RGB hexadecimal notation
o	#ft0000, #ft0000ff, #f00, #f00f
o	RGB FUNCTIONS
o	Rgb (255,0,0),rgb(100%,0%,0%)rgba(255,0,0,1)
o	HSL functions:
Hsl (0, 100%,50%), hsla(0, 100%,50%,1)
o	Current color, transparent
	Strings
Delimated by single quotes (‘) or double quotes(“)
	Functions ex. Counter, rotateX(), roatateY(), attrib()
	Miscellaneous types ex. <angle><number><images><ratio>
•	CSS Preprocessors
o	Generates CSS using a custom language syntax that typically includes features that don’t exist in pure CSS (e.g. variables, control flow, nesting, mixins, functions,etc.)
o	e.g. sass, less, stylus,etc.
o	CSS Frameworks
o	Provides predefined CSS design functionality that can reused, extended or customized
o	e.g. Bootstrap, foundation, materialize, etc.
o	Dolyfills
o	Provides features that developers expect browsers to provide natively
o	e.g. Modernizer, Selectivizr, etc.
-top level code (i.e. code  outside functions)
-code inside function are executed only when the function is invoke

< -----------inline scripts----------------->
<p><button onclick = ‘alert(“You clicked me!”);’ >

Javascript Execution Enviroment
•	Core Javascript  (Ecma Script) Language and API
•	(Traditional) Browser Object Model (BOM) API (non- standardized)
Window, Navigator, Screen, Location, History
•	Document Object Model (DOM)API
o	Node, Document, Element, Text, Attr, DocumentType, Comment,etc.
o	Event, EventTarget, EventListener, etc
o	CSS Style sheet, CSS Rule, etc.
o	Miscellaneous java script web APISs
o	Geolocation, indexedDB, local storage, push notification, service, workers

Document object model (DOM)
o	API

Javascript Event handling
Event propagation order (DOM – compliant browsers)
-	Capturing phase
-	At target
-	Bubbling phase

Event Handler Registration

Method #1 (inline HTML event attribute)..
Non-standard, universal support, not recommended
<button id = ‘button’ onclick = handler
Method # 2 (pre-DOM L2)..
	Non-standard, universal support..
Var button = document.getElementById(‘button’);
Button.oncick = handler;
Can register only one handler..
Remove handler by assigning null value to attribute
Method #3 (DOM L2 event registration)
Standard, well-supported..
var button = document.queryselector(‘#button’);
button.addEventListener(‘click’, handler);
button.addEventListener(‘click’, handler,true);
Can register more than one event handler,
Can register handlers on the bubble or capture phase
Use  removeEventListener() to remove event handler
Use dispatchEvent() to trigger event pragmatically

Method #4 (Microsoft-specific, non standard, IEV6-V10)
Var button = document.getElementById(‘button’);
Button.attachEvent(‘onclick’.handler),
Can register more than one event handler
Can register handlers only on the bubble phase
Use detachEvent() to remove event handler
Use tireEvent() to trigger event pragmatically

‘cross-browser event registration
Var button = document.getElementById(‘button’);
If(button.addEventListener){
	Button.addEventListener(‘click’, handler);
} else if (button.attachEvent){
	Button.attachEvent(‘onclick’,handler);
}else{
	Button.onclick = handler;
}
Determining the identity of the element handling the event for method #1 registration function handler (obj){
	obj is the element that is handling the element
Event object properties and methods
-	Bubbles
-	Event phase
-	Target (or sElement (non-standard))
-	Current target
-	PreventDefault()
-	Stop Propagation()
-	Stop immediate propagation()
-	Other event-specific information

Creating and Dispatching Events
Var clickEvent = new Event(‘click’)
Var button = document.querySelector (‘if button’);’
Button.dispatchEvent(clickEvent);

Var ce = new customEvent(‘pindot’);
Button addEventListener (‘pidot’, pindot handler),
Button.dispatchEvent(ce);
